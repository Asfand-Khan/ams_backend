generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

////////////////////// ENUMS /////////////////////////////////

enum Gender {
  male
  female
}

enum EmployeeStatus {
  active
  inactive
  terminated
}

///////////////////// ENUMS /////////////////////////////////

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  is_active   Boolean  @default(true)
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Designation Designation[]
  Employee    Employee[]

  @@index([name], name: "idx_name")
}

model Designation {
  id            Int      @id @default(autoincrement())
  title         String   @unique @db.VarChar(100)
  level         Int
  description   String?  @db.Text
  department_id Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_active     Boolean  @default(true)
  is_deleted    Boolean  @default(false)

  department Department? @relation(fields: [department_id], references: [id], onDelete: SetNull)
  Employee   Employee[]

  @@index([title], name: "idx_title")
}

model Employee {
  id              Int            @id @default(autoincrement())
  employee_code   String         @unique @db.VarChar(20)
  full_name       String         @db.VarChar(100)
  email           String         @unique @db.VarChar(100)
  phone           String?        @unique @db.VarChar(20)
  cnic            String?        @unique @db.VarChar(20)
  gender          Gender?
  dob             DateTime?      @db.Date
  join_date       DateTime?      @db.Date
  leave_date      DateTime?      @db.Date
  department_id   Int
  designation_id  Int
  profile_picture String?        @db.VarChar(255)
  address         String?        @db.Text
  status          EmployeeStatus @default(active)
  is_active       Boolean        @default(true)
  is_deleted      Boolean        @default(false)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  department  Department  @relation(fields: [department_id], references: [id], onDelete: Restrict)
  designation Designation @relation(fields: [designation_id], references: [id], onDelete: Restrict)

  @@index([employee_code], name: "idx_employee_code")
  @@index([email], name: "idx_email")
}

model OfficeLocation {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(100)
  latitude      String   @unique
  longitude     String   @unique
  radius_meters Int      @db.Int
  address       String?  @db.Text
  is_active     Boolean  @default(true)
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([latitude, longitude], name: "idx_longitude_latitude")
}

model Shift {
  id                            Int      @id @default(autoincrement())
  name                          String   @unique @db.VarChar(50)
  start_time                    DateTime @db.Time
  end_time                      DateTime @db.Time
  grace_minutes                 Int      @default(10)
  half_day_hours                Decimal  @default(4.0) @db.Decimal(5, 2)
  early_leave_threshold_minutes Int      @default(30)
  break_duration_minutes        Int      @default(0)
  is_active                     Boolean  @default(true)
  is_deleted                    Boolean  @default(false)
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt
}

// PUT LOGS TABLES HERE UNDER THIS COMMENT
model AllActivityLog {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  method        String?
  path          String?
  contentLength Int?
  responseTime  Float?
  requestBody   String?
  payload       String?  @db.LongText
  databaseQuery String?  @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

////////////////////// ENUMS /////////////////////////////////

enum UserType {
  employee
  manager
  admin
  hr
  lead
}

enum Gender {
  male
  female
}

enum EmployeeStatus {
  active
  inactive
  terminated
}

enum CheckInStatus {
  on_time
  late
  absent
  manual
}

enum CheckOutStatus {
  on_time
  early_leave
  early_go
  overtime
  manual
  half_day
}

enum DayStatus {
  present
  absent
  leave
  weekend
  holiday
  manual_present
  work_from_home
  early_leave
  on_time
  early_go
  overtime
  half_day
}

enum DeviceType {
  android
  ios
  web
  other
}

enum LeaveStatus {
  pending
  approved
  rejected
}

enum RequestType {
  missed_check_in
  missed_check_out
  wrong_time
  both
}

enum RequestStatus {
  pending
  approved
  rejected
}

enum AssetRequestType {
  new
  replacement
  repair
  return
  issue
  complaint
}

enum ComplaintCategory {
  hardware
  software
  network
  office_facility
  other
}

enum AssetType {
  laptop
  desktop
  mouse
  keyboard
  monitor
  printer
  scanner
  hard_drive
  charger
  projector
  software_installation
  software_error
  internet_issue
  vpn_issue
  email_issue
  power_issue
  desk
  chair
  AC
  light
  other
}

enum ComplaintStatus {
  pending
  in_progress
  resolved
  rejected
}

///////////////////// ENUMS /////////////////////////////////

model User {
  id                   Int       @id @default(autoincrement())
  username             String    @unique @db.VarChar(50)
  email                String    @unique @db.VarChar(100)
  password_hash        String    @db.VarChar(255)
  type                 UserType
  employee_id          Int?
  last_login           DateTime?
  password_reset_token String?   @db.VarChar(255)
  otp_token            String?   @db.VarChar(6)
  token_expiry         DateTime?
  is_active            Boolean   @default(true)
  is_deleted           Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  // ✅ Relation to the Employee this User is linked with
  employee         Employee?       @relation("UserEmployee", fields: [employee_id], references: [id])
  user_menu_rights UserMenuRight[]

  @@index([email], name: "idx_email")
  @@index([username], name: "idx_username")
}

model Employee {
  id              Int            @id @default(autoincrement())
  employee_code   String         @unique @db.VarChar(20)
  full_name       String         @db.VarChar(100)
  father_name     String?        @db.VarChar(100)
  email           String         @unique @db.VarChar(100)
  phone           String?        @unique @db.VarChar(20)
  cnic            String?        @unique @db.VarChar(20)
  gender          Gender?
  dob             DateTime?      @db.Date
  join_date       DateTime?      @db.Date
  leave_date      DateTime?      @db.Date
  department_id   Int
  designation_id  Int
  profile_picture String?        @default("default.png") @db.VarChar(255)
  address         String?        @db.Text
  status          EmployeeStatus @default(active)
  is_active       Boolean        @default(true)
  is_deleted      Boolean        @default(false)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  // ✅ Relations
  department  Department  @relation(fields: [department_id], references: [id], onDelete: Restrict)
  designation Designation @relation(fields: [designation_id], references: [id], onDelete: Restrict)

  // ✅ Relation to User (one Employee may have many User accounts, usually it's one)
  User User[] @relation("UserEmployee")

  // ✅ Employee Shifts
  EmployeeShift EmployeeShift[]

  // ✅ Employee Attendance
  Attendance Attendance[]

  // ✅ Verified Attendance Records by this Employee (e.g., Manager verified)
  AttendanceVerifiedBy Attendance[] @relation("AttendanceVerifiedBy")

  // ✅ Lead of Teams
  ledTeams Team[] @relation("EmployeeTeamLead")

  // ✅ Member of Teams
  TeamMember TeamMember[]

  // ✅ Leave Quotas
  EmployeeLeaveQuota EmployeeLeaveQuota[]

  // ✅ Leaves applied by this Employee
  Leave Leave[]

  // ✅ Leaves approved by this Employee (Approver)
  ApprovedLeaves Leave[] @relation("EmployeeLeaveApprover")

  // ✅ Attendance Correction Requests raised by this Employee
  attendanceCorrectionRequestsCreated AttendanceCorrectionRequest[] @relation("EmployeeAttendanceCorrectionRequests")

  // ✅ Attendance Correction Requests reviewed by this Employee
  attendanceCorrectionRequestsReviewed AttendanceCorrectionRequest[] @relation("EmployeeReviewedAttendanceCorrectionRequests")

  /// ✅ Added Asset Complaint Relations
  assetComplaintRequestsCreated  AssetComplaintRequest[] @relation("EmployeeAssetComplaintRequests")
  assetComplaintRequestsReviewed AssetComplaintRequest[] @relation("EmployeeReviewedAssetComplaintRequests")

  @@index([employee_code], name: "idx_employee_code")
  @@index([email], name: "idx_email")
}

model Menu {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.VarChar(100)
  parent_id   Int?
  url         String? @db.VarChar(255)
  icon        String? @db.VarChar(100)
  sorting     Int     @default(0)
  created_by  Int
  deleted_by  Int?
  is_active   Boolean @default(true)
  is_deleted  Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // Relations
  parent           Menu?           @relation("menu_children", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children         Menu[]          @relation("menu_children")
  user_menu_rights UserMenuRight[]
}

model UserMenuRight {
  id         Int      @id @default(autoincrement())
  user_id    Int
  menu_id    Int
  can_view   Boolean  @default(true)
  can_create Boolean  @default(false)
  can_edit   Boolean  @default(false)
  can_delete Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menu_id], references: [id], onDelete: Cascade)

  @@unique([user_id, menu_id])
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  is_active   Boolean  @default(true)
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Designation Designation[]
  Employee    Employee[]
  Team        Team[]

  @@index([name], name: "idx_name")
}

model Designation {
  id            Int      @id @default(autoincrement())
  title         String   @unique @db.VarChar(100)
  level         Int
  description   String?  @db.Text
  department_id Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_active     Boolean  @default(true)
  is_deleted    Boolean  @default(false)

  department Department? @relation(fields: [department_id], references: [id], onDelete: SetNull)
  Employee   Employee[]

  @@index([title], name: "idx_title")
}

model OfficeLocation {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(100)
  latitude      String   @unique
  longitude     String   @unique
  radius_meters Int      @db.Int
  address       String?  @db.Text
  is_active     Boolean  @default(true)
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  check_in_attendance  Attendance[] @relation("AttendanceCheckInOffice")
  check_out_attendance Attendance[] @relation("AttendanceCheckOutOffice")

  @@index([latitude, longitude], name: "idx_longitude_latitude")
}

model Shift {
  id                            Int      @id @default(autoincrement())
  name                          String   @unique @db.VarChar(50)
  start_time                    String
  end_time                      String
  grace_minutes                 Int      @default(10)
  half_day_hours                Decimal  @default(4.0) @db.Decimal(5, 2)
  early_leave_threshold_minutes Int      @default(30)
  break_duration_minutes        Int      @default(0)
  is_active                     Boolean  @default(true)
  is_deleted                    Boolean  @default(false)
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  EmployeeShift EmployeeShift[]
}

model EmployeeShift {
  id             Int       @id @default(autoincrement())
  employee_id    Int
  shift_id       Int
  effective_from DateTime  @db.Date
  effective_to   DateTime? @db.Date
  is_active      Boolean   @default(true)
  is_deleted     Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  shift    Shift    @relation(fields: [shift_id], references: [id], onDelete: Restrict)

  @@unique([employee_id, effective_from])
  @@index([employee_id])
  @@index([shift_id])
}

model Team {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(100)
  description   String?  @db.Text
  team_lead_id  Int?
  department_id Int?
  is_active     Boolean  @default(true)
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // ✅ Team Lead is an Employee
  team_lead Employee? @relation("EmployeeTeamLead", fields: [team_lead_id], references: [id], onDelete: SetNull)

  // ✅ Department this team belongs to
  department Department? @relation(fields: [department_id], references: [id], onDelete: SetNull)

  // ✅ Members of this team
  members TeamMember[]

  @@index([name], name: "idx_team_name")
}

model TeamMember {
  id           Int      @id @default(autoincrement())
  team_id      Int
  employee_id  Int
  assigned_at  DateTime @default(now())
  role_in_team String?  @db.VarChar(50)
  is_active    Boolean  @default(true)
  is_deleted   Boolean  @default(false)

  team     Team     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@unique([team_id, employee_id])
}

model Holiday {
  id           Int      @id @default(autoincrement())
  holiday_date DateTime @unique @db.Date
  title        String   @db.VarChar(100)
  description  String?  @db.Text
  is_active    Boolean  @default(true)
  is_deleted   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([holiday_date], name: "idx_holiday_date")
}

model OfficeWifiNetwork {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100)
  password   String?  @db.VarChar(255)
  notes      String?  @db.Text
  is_active  Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Attendance {
  id                  Int             @id @default(autoincrement())
  employee_id         Int
  date                String
  check_in_time       String?
  check_in_office_id  Int?
  check_out_time      String?
  check_out_device_id String?         @db.VarChar(100)
  check_out_office_id Int?
  work_hours          String?
  check_in_status     CheckInStatus?
  check_out_status    CheckOutStatus?
  day_status          DayStatus       @default(present)
  verified_by         Int?
  is_active           Boolean         @default(true)
  is_deleted          Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  // ✅ Main Attendance Relation
  employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  // ✅ Check-in Office
  checkInOffice OfficeLocation? @relation("AttendanceCheckInOffice", fields: [check_in_office_id], references: [id], onDelete: SetNull)

  // ✅ Check-out Office
  checkOutOffice OfficeLocation? @relation("AttendanceCheckOutOffice", fields: [check_out_office_id], references: [id], onDelete: SetNull)

  // ✅ Verified By
  verifiedBy Employee? @relation("AttendanceVerifiedBy", fields: [verified_by], references: [id], onDelete: SetNull)

  @@unique([employee_id, date])
  @@index([date], name: "idx_date")
  @@index([employee_id, date], name: "idx_employee_date")
}

model Leave {
  id            Int         @id @default(autoincrement())
  employee_id   Int
  leave_type_id Int
  start_date    String
  end_date      String
  total_days    Int         @default(0)
  reason        String?
  status        LeaveStatus @default(pending)
  applied_on    DateTime    @default(now())
  approved_by   Int?
  approved_on   DateTime?
  remarks       String?
  is_active     Boolean     @default(true)
  is_deleted    Boolean     @default(false)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  employee   Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  leave_type LeaveType @relation(fields: [leave_type_id], references: [id], onDelete: Cascade)

  // ✅ Approver of the Leave
  approver Employee? @relation("EmployeeLeaveApprover", fields: [approved_by], references: [id])

  @@index([employee_id, status])
}

model EmployeeLeaveQuota {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  leave_type_id Int
  year          Int
  used_days     Int      @default(0)
  is_active     Boolean  @default(true)
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  employee   Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  leave_type LeaveType @relation(fields: [leave_type_id], references: [id], onDelete: Cascade)

  @@unique([employee_id, leave_type_id, year])
}

model LeaveType {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  total_quota        Int                  @default(0)
  is_active          Boolean              @default(true)
  is_deleted         Boolean              @default(false)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  EmployeeLeaveQuota EmployeeLeaveQuota[]
  Leave              Leave[]
}

model AttendanceCorrectionRequest {
  id              Int         @id @default(autoincrement())
  employee_id     Int
  attendance_date String
  request_type    RequestType

  original_check_in   String?
  original_check_out  String?
  requested_check_in  String?
  requested_check_out String?

  reason String
  status RequestStatus @default(pending)

  reviewed_by Int?
  reviewed_on DateTime?
  remarks     String?

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // ✅ Raised By
  employee Employee @relation("EmployeeAttendanceCorrectionRequests", fields: [employee_id], references: [id], onDelete: Cascade)

  // ✅ Reviewed By
  reviewer Employee? @relation("EmployeeReviewedAttendanceCorrectionRequests", fields: [reviewed_by], references: [id], onDelete: SetNull)

  @@index([employee_id, attendance_date], name: "idx_employee_date")
  @@index([status], name: "idx_status")
}

model AssetComplaintRequest {
  id          Int  @id @default(autoincrement())
  employee_id Int
  reviewed_by Int?

  request_type AssetRequestType
  category     ComplaintCategory
  asset_type   AssetType

  reason             String
  status             ComplaintStatus @default(pending)
  requested_at       DateTime        @default(now())
  reviewed_at        DateTime?
  resolution_remarks String?

  is_active  Boolean  @default(true)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  /// ✅ Relations
  requested_by_employee Employee  @relation("EmployeeAssetComplaintRequests", fields: [employee_id], references: [id], onDelete: Cascade)
  reviewed_by_employee  Employee? @relation("EmployeeReviewedAssetComplaintRequests", fields: [reviewed_by], references: [id], onDelete: SetNull)

  @@index([employee_id, status])
  @@index([category, asset_type])
}

// PUT LOGS TABLES HERE UNDER THIS COMMENT
model AllActivityLog {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  method        String?
  path          String?
  contentLength Int?
  responseTime  Float?
  requestBody   String?
  payload       String?  @db.LongText
  databaseQuery String?  @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
